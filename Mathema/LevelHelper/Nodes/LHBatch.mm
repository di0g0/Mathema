//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#import "LHBatch.h"
#import "LHLayer.h"
#import "LHSprite.h"
#import "LHBezier.h"
#import "LHDictionaryExt.h"
#import "SHDocumentLoader.h"

#import "LHSettings.h"
#import "LevelHelperLoader.h"

#import "LHSettings.h"

static int untitledBatchCount = 0;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@interface LHBatch (Private)
-(void)addChildFromDictionary:(NSDictionary*)childDict;
@end
////////////////////////////////////////////////////////////////////////////////
@implementation LHBatch
@synthesize uniqueName;
@synthesize imagePath;
////////////////////////////////////////////////////////////////////////////////
-(void) dealloc{		
    
    CCLOG(@"LH Batch Dealloc");
    
#ifndef LH_ARC_ENABLED
    [uniqueName release];
    [imagePath release];
    [shFile release];
	[super dealloc];
#endif
}
//------------------------------------------------------------------------------
-(NSString*)shFile{
    return shFile;
}
-(void)setShFile:(NSString*)file{
    
    if(file){
        if(shFile)
            [shFile release];
        shFile = [[NSString alloc] initWithString:file];
    }
}
//------------------------------------------------------------------------------
-(id) initWithDictionary:(NSDictionary*)dictionary layer:(LHLayer*)layer{
    
    NSString* imgPath = [[LHSettings sharedInstance] imagePath:[dictionary stringForKey:@"SheetImage"]];
    
    NSAssert(imgPath!=nil, @"Image path must not be nil");
        
    self = [super initWithFile:imgPath capacity:29]; //29 is the default capacity
    if (self != nil)
    {
        NSString* uName = [dictionary objectForKey:@"UniqueName"];
        if(uName)
            uniqueName = [[NSString alloc] initWithString:uName];
        else {
            uName = [dictionary stringForKey:@"SheetName"];
            if(uName){//we may load from SH
                uniqueName = [[NSString alloc] initWithString:uName];                
            }
            else {
                NSLog(@"ERROR - CREATING LHBatch WITH NO SHEET NAME");
                uniqueName = [[NSString alloc] initWithFormat:@"UntitledLayer_%d", untitledBatchCount];
                ++untitledBatchCount;
            }
        }
        
        if([dictionary objectForKey:@"SHScene"])
            shFile = [[NSString alloc] initWithString:[dictionary stringForKey:@"SHScene"]];
        
        imagePath = [[NSString alloc] initWithString:imgPath];
        
        zOrder_ = [dictionary intForKey:@"ZOrder"];
        
        if(layer){
            [layer addChild:self z:[self zOrder]];
        }
        
        NSArray* childrenInfo = [dictionary objectForKey:@"Children"];
        if(childrenInfo)
        {
            for(NSDictionary* childDict in childrenInfo){
                [self addChildFromDictionary:childDict];
            }
        }
    }
    return self;
}
//------------------------------------------------------------------------------
+(id) batchWithDictionary:(NSDictionary*)dictionary layer:(LHLayer*)layer{
#ifndef LH_ARC_ENABLED
    return [[[self alloc] initWithDictionary:dictionary layer:layer] autorelease];
#else
    return [[self alloc] initWithDictionary:dictionary layer:layer];
#endif   
}
+(id) batchWithSheetName:(NSString*)sheetName shFile:(NSString*)spriteHelperFile
{
    NSDictionary* dictionary = [[SHDocumentLoader sharedInstance] dictionaryForSheetNamed:sheetName inDocument:spriteHelperFile];
    
#ifndef LH_ARC_ENABLED
    LHBatch* batch = [[[self alloc] initWithDictionary:dictionary layer:nil] autorelease];
#else
    LHBatch* batch = [[self alloc] initWithDictionary:dictionary layer:nil];
#endif       
    
    [batch setShFile:spriteHelperFile];
    return batch;
}
//------------------------------------------------------------------------------
-(void) removeSelf{
    [self removeFromParentAndCleanup:YES];
}
-(void)setParentLoader:(LevelHelperLoader*)p{
    parentLoader = p;
}
//------------------------------------------------------------------------------
-(void)addChildFromDictionary:(NSDictionary*)childDict
{
    if([[childDict stringForKey:@"NodeType"] isEqualToString:@"LHSprite"])
    {
        LHSprite* sprite = [LHSprite batchSpriteWithDictionary:childDict batch:self];
        //sprite its adding itself to the batch node
        
        //we use the selector protocol so that we dont get warnings since this method is 
        //hidden from the user
        [sprite performSelector:@selector(setParentLoader:) withObject:parentLoader];
    }
    else if([[childDict stringForKey:@"NodeType"] isEqualToString:@"LHLayer"]){
        NSLog(@"ERROR: Batch nodes should not have LHLayer as children.");
    }
    else if([[childDict stringForKey:@"NodeType"] isEqualToString:@"LHBatch"]){
        NSLog(@"ERROR: Batch nodes should not have LHBatch as children.");
    }
    else if([[childDict stringForKey:@"NodeType"] isEqualToString:@"LHBezier"]){
        NSLog(@"ERROR: Batch nodes should not have LHBezier as children.");
    }
}
//------------------------------------------------------------------------------
-(LHSprite*)spriteWithUniqueName:(NSString*)name{
    
    for(id node in children_){
        if([node isKindOfClass:[LHSprite class]]){
            if([[(LHSprite*)node uniqueName] isEqualToString:name]){
                return node;
            }
        }
    }
    
    return nil;
}
//------------------------------------------------------------------------------
-(NSArray*)allSprites{
    NSMutableArray* array = [NSMutableArray array];
    
    for(id node in children_){
        if([node isKindOfClass:[LHSprite class]]){
            [array addObject:node];    
        }
    }
    
    return array;
}
//------------------------------------------------------------------------------
-(NSArray*)spritesWithTag:(int)tag{
    NSMutableArray* array = [NSMutableArray array];
    
    for(id node in children_){
        if([node isKindOfClass:[LHSprite class]]){
            if([node tag] == tag)
                [array addObject:node];    
        }
    }
    
    return array;    
}
//------------------------------------------------------------------------------
@end
