//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import <Foundation/Foundation.h>
#import "cocos2d.h"
#include "Box2D.h"
#include "LHContactListener.h"
#import "LHContactInfo.h"

@class LevelHelperLoader;
@interface LHContactNode : CCNode
{
        NSMutableDictionary* preCollisionMap;
        NSMutableDictionary* postCollisionMap;
        NSMutableDictionary* beginEndCollisionMap;
        LHContactListener *lhContactListener;
}

-(id) initContactNodeWithWorld:(b2World*)world;
+(id) contactNodeWithWorld:(b2World*)world;

-(void)preSolve:(b2Contact*)contact                     
       manifold:(const b2Manifold*) oldManifold;

-(void)postSolve:(b2Contact*) contact
         impulse:(const b2ContactImpulse*) impulse;

-(void) beginEndContact:(b2Contact*) contact isBegin:(bool)isBegin;


-(void) registerBeginOrEndColisionCallbackBetweenTagA:(int)tagA 
                                              andTagB:(int)tagB 
                                           idListener:(id)obj 
                                          selListener:(SEL)selector;

-(void) cancelBeginOrEndColisionCallbackBetweenTagA:(int)tagA 
                                            andTagB:(int)tagB;

//------------------------------------------------------------------------------

-(void) registerPreColisionCallbackBetweenTagA:(int)tagA 
                                       andTagB:(int)tagB 
                                    idListener:(id)obj 
                                   selListener:(SEL)selector;

-(void) cancelPreColisionCallbackBetweenTagA:(int)tagA 
                                     andTagB:(int)tagB;

-(void) registerPostColisionCallbackBetweenTagA:(int)tagA 
                                        andTagB:(int)tagB 
                                     idListener:(id)obj 
                                    selListener:(SEL)selector;

-(void) cancelPostColisionCallbackBetweenTagA:(int)tagA 
                                      andTagB:(int)tagB;


@end
