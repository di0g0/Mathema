//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#import "LevelHelperLoader.h"
@class LHSprite;
@class LHBezier;
@interface LHTouchInfo : NSObject
{
    CGPoint relativePoint; //the touch point relative to the center of the sprite (does not work for bezier shapes)
    CGPoint glPoint; //the touch point converted to OpenGL coordinates;
    CGPoint delta; //the delta movement -- (0, 0) on touchBegin
    
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#ifndef LH_ARC_ENABLED
    UIEvent* event; //the event
    UITouch* touch; //the touch 
    LHSprite* sprite; //the sprite on which the touch was performed (nil if touch was performed on a bezier)
    LHBezier* bezier;//the bezier tile shape on which the touch was performed (nil if touch was performed on a sprite)
#endif    
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
#ifndef LH_ARC_ENABLED
    NSEvent* event; //the event
    NSTouch* touch; //the touch 
    LHSprite* sprite; //the sprite on which the touch was performed (nil if touch was performed on a bezier)
    LHBezier* bezier;//the bezier tile shape on which the touch was performed (nil if touch was performed on a sprite)
#endif    
#endif
    
}
@property (readwrite) CGPoint relativePoint;
@property (readwrite) CGPoint glPoint;
@property (readwrite) CGPoint delta;
@property (readwrite, assign) LHSprite* sprite;
@property (readwrite, assign) LHBezier* bezier;
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
@property (readwrite, assign) UIEvent* event;
@property (readwrite, assign) UITouch* touch;
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
@property (readwrite, assign) NSEvent* event;
@property (readwrite, assign) NSTouch* touch;
#endif

+(id)touchInfo;
@end
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
@interface LHObserverPair : NSObject{
#ifndef LH_ARC_ENABLED
    id object;
    SEL selector;
#endif
}
@property (readwrite, assign) id object;
@property (readwrite, assign) SEL selector;
+(id)observerPair;
+(void)performObserverPair:(LHObserverPair*)pair object:(id)info;
@end
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------


@interface LHTouchMgr : NSObject
{
    NSMutableDictionary* onTouchBeginOnSpriteOfTag;
    NSMutableDictionary* onTouchMovedOnSpriteOfTag;
    NSMutableDictionary* onTouchEndedOnSpriteOfTag;
    NSMutableDictionary* swallowTouchesOnTag;
    NSMutableDictionary* priorityForTouchesOfTag;
}

+(LHTouchMgr*) sharedInstance;

//REGISTER FOR TOUCH EVENTS BEFORE LOADING THE LEVEL FILE

-(void) setPriority:(int)priority forTouchesOfTag:(int)tag; //call this only if you want other priority then 0
-(void) swallowTouchesForTag:(int)tag; //call this only if you want to swallow the touches

//selector needs to have this signature -(void) touchXXX:(LHTouchInfo*)info
//sprite will be the LHSprite* instance on which the touch was performed that has the registered tag
//for specific touch on a certain sprite use the observer from LHSprite
-(void)registerTouchBeginObserver:(id)observer selector:(SEL)selector forTag:(int)tag;

//in order to get events for touch moved and touch ended you also need touch begin to be registered
-(void)registerTouchMovedObserver:(id)observer selector:(SEL)selector forTag:(int)tag;
-(void)registerTouchEndedObserver:(id)observer selector:(SEL)selector forTag:(int)tag;

-(void)removeTouchBeginObserver:(id)observer; //removing touch begin observer will remove all other observers also
-(void)removeTouchMovedObserver:(id)observer;
-(void)removeTouchEndedObserver:(id)observer;

//get back the observer that was registered for a specific tag
-(LHObserverPair*)onTouchBeginObserverForTag:(int)tag;
-(LHObserverPair*)onTouchMovedObserverForTag:(int)tag;
-(LHObserverPair*)onTouchEndedObserverForTag:(int)tag;

-(bool)shouldTouchesBeSwallowedForTag:(int)tag;
-(int)priorityForTag:(int)tag;
@end	
