//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import "LHDictionaryExt.h"

@implementation NSDictionary (LH_EXTENDING_DICTIONARY)
////////////////////////////////////////////////////////////////////////////////
-(float) floatForKey:(NSString*)key{
    
    NSNumber* val = [self objectForKey:key];
    
    if(nil == val)
        NSLog(@"Float for key %@ is not available", key);
    
    return [val floatValue]; //if key is not available it will return 0.0f
}
-(int) intForKey:(NSString*)key{
    
    NSNumber* val = [self objectForKey:key];
    
    if(nil == val)
        NSLog(@"Int for key %@ is not available", key);
    
    return [val intValue]; //if key is not available it will return 0
}
-(bool) boolForKey:(NSString*)key{
    NSNumber* val = [self objectForKey:key];
    
    if(nil == val)
    {
        NSLog(@"Bool for key %@ is not available", key);
    }
    
    return [val boolValue]; //if key is not available it will return false
}
-(CGPoint) pointForKey:(NSString*)key{
    NSString* val = [self objectForKey:key];
    
    if(nil == val)
    {
        NSLog(@"CGPoint for key %@ is not available", key);
        return CGPointZero;
    }
    
    return CGPointFromString(val);
}
-(CGRect) rectForKey:(NSString*)key{
    
    NSString* val = [self objectForKey:key];
    
    if(nil == val)
    {
        NSLog(@"CGRect for key %@ is not available", key);
        return CGRectZero;
    }
    
    return CGRectFromString(val);
}
-(CGSize) sizeForKey:(NSString*)key{
    NSString* val = [self objectForKey:key];
    
    if(nil == val)
    {
        NSLog(@"CGSize for key %@ is not available", key);
        return CGSizeZero;
    }
    
    return CGSizeFromString(val);
    
}
-(ccColor3B) colorForKey:(NSString*)key{

    NSString* val = [self objectForKey:key];
    
    if(nil == val)
    {
        NSLog(@"ccColor3B for key %@ is not available", key);
        return ccc3(255, 255, 255);
    }
    
    CGRect rect = CGRectFromString(val);
    return ccc3(rect.origin.x*255, rect.origin.y*255, rect.size.width*255);
}

-(NSString*)stringForKey:(id)key{

    NSString* str = [self objectForKey:key];
    
    if(nil == str){
        NSLog(@"NSString for key %@ is not available", key);
        return @"";
    }
    return str;
}
////////////////////////////////////////////////////////////////////////////////
@end
